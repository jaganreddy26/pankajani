import { Component, ContentChild, ContentChildren, Directive, EventEmitter, Input, NgModule, Output, TemplateRef, ViewContainerRef } from '@angular/core';
import { animate, style, transition, trigger } from '@angular/animations';
import { CommonModule } from '@angular/common';
import { BrowserModule } from '@angular/platform-browser';

class TabHeadingDirective {
    /**
     * @param {?} templateRef
     */
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
TabHeadingDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tabHeading]"
            },] },
];
/**
 * @nocollapse
 */
TabHeadingDirective.ctorParameters = () => [
    { type: TemplateRef, },
];

class TabComponent {
    constructor() {
        this.active = false;
        this.disabled = false;
    }
    /**
     * @return {?}
     */
    get headingTemplate() {
        return this.heading ? this.heading.templateRef : null;
    }
}
TabComponent.decorators = [
    { type: Component, args: [{
                animations: [
                    trigger('myAnimation', [
                        transition(':enter', [
                            style({ opacity: 0 }),
                            animate('200ms')
                        ]),
                        transition(':leave', [
                            style({ opacity: 1 }),
                            animate('200ms')
                        ])
                    ])
                ],
                selector: "ngx-tab",
                template: `
    <div *ngIf="active" [@myAnimation]="active">
      <ng-content></ng-content>
    </div>
  `
            },] },
];
/**
 * @nocollapse
 */
TabComponent.ctorParameters = () => [];
TabComponent.propDecorators = {
    'heading': [{ type: ContentChild, args: [TabHeadingDirective,] },],
    'title': [{ type: Input },],
    'active': [{ type: Input },],
    'disabled': [{ type: Input },],
};

class TabsetComponent {
    constructor() {
        this.animate = true;
        this.customNavClass = '';
        this.customTabsClass = '';
        this.onSelect = new EventEmitter(false);
    }
    /**
     * @param {?} tab
     * @return {?}
     */
    changeActiveTab(tab) {
        if (!tab.disabled && !tab.active) {
            const /** @type {?} */ me = this;
            const /** @type {?} */ tabs = this.tabs.toArray();
            tabs.forEach((t) => t.active = false);
            if (this.animate) {
                setTimeout(() => {
                    tab.active = true;
                    me.onSelect.emit(tabs.indexOf(tab));
                }, 201);
            }
            else {
                tab.active = true;
                me.onSelect.emit(tabs.indexOf(tab));
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        setTimeout(() => {
            const /** @type {?} */ readTabs = this.tabs.toArray();
            const /** @type {?} */ activeTab = readTabs.find((tab) => tab.active === true);
            if (!activeTab && readTabs.length > 0) {
                readTabs[0].active = true;
            }
        });
    }
}
TabsetComponent.decorators = [
    { type: Component, args: [{
                selector: "ngx-tabset",
                template: `
    <style>
      .tabset-style ul.tabset-header {
        list-style: none;
        margin: 0;
        padding: 0;
        display: flex;
      }

      .tabset-style ul.tabset-header li {
        padding: 12px;
      }

      /* Optional style that can be disabled */
      .tabset-style ul.tabset-header li:hover {
        cursor: pointer;
        -moz-box-shadow: inset 0 -4px 0 0 lightgray;
        -webkit-box-shadow: inset 0 -4px 0 0 lightgray;
        box-shadow: inset 0 -4px 0 0 lightgray;
      }

      .tabset-style ul.tabset-header li.disabled {
        opacity: .4;
      }

      .tabset-style ul.tabset-header li.disabled:hover {
        -moz-box-shadow: none;
        -webkit-box-shadow: none;
        box-shadow: none;
        cursor: not-allowed;
      }

      .tabset-style ul.tabset-header li.active {
        -moz-box-shadow: inset 0 -4px 0 0 blue;
        -webkit-box-shadow: inset 0 -4px 0 0 blue;
        box-shadow: inset 0 -4px 0 0 blue;
      }

      .tabset-content {
      }
    </style>
    <nav [ngClass]="{'tabset-style': !disableStyle}">
      <ul class="tabset-header" [ngClass]="customNavClass">
        <li role="presentation" *ngFor="let tab of tabs" [class.active]="tab.active"
            [class.disabled]="tab.disabled" (click)="changeActiveTab(tab)">
          <span [tabTransclude]="tab.headingTemplate">{{ tab.title }}</span>
        </li>
      </ul>
    </nav>
    <div class="tabs-container" [ngClass]="customTabsClass" [@.disabled]="!animate">
      <div class="tabset-content">
        <ng-content></ng-content>
      </div>
    </div>
  `
            },] },
];
/**
 * @nocollapse
 */
TabsetComponent.ctorParameters = () => [];
TabsetComponent.propDecorators = {
    'disableStyle': [{ type: Input },],
    'animate': [{ type: Input },],
    'customNavClass': [{ type: Input },],
    'customTabsClass': [{ type: Input },],
    'tabs': [{ type: ContentChildren, args: [TabComponent,] },],
    'onSelect': [{ type: Output },],
};

class TabTranscludeDirective {
    /**
     * @param {?} viewRef
     */
    constructor(viewRef) {
        this.viewRef = viewRef;
    }
    /**
     * @param {?} templateRef
     * @return {?}
     */
    set tabTransclude(templateRef) {
        this.tabReference = templateRef;
        if (templateRef) {
            this.viewRef.createEmbeddedView(templateRef);
        }
    }
    /**
     * @return {?}
     */
    get tabTransclude() {
        return this.tabReference;
    }
}
TabTranscludeDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tabTransclude]"
            },] },
];
/**
 * @nocollapse
 */
TabTranscludeDirective.ctorParameters = () => [
    { type: ViewContainerRef, },
];
TabTranscludeDirective.propDecorators = {
    'tabTransclude': [{ type: Input },],
};

class TabsModule {
    /**
     * Use in AppModule: new instance of SumService.
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: TabsModule,
            providers: []
        };
    }
    /**
     * Use in features modules with lazy loading: new instance of SumService.
     * @return {?}
     */
    static forChild() {
        return {
            ngModule: TabsModule,
            providers: []
        };
    }
}
TabsModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    TabComponent,
                    TabHeadingDirective,
                    TabsetComponent,
                    TabTranscludeDirective
                ],
                exports: [
                    TabComponent,
                    TabHeadingDirective,
                    TabsetComponent,
                ],
                imports: [CommonModule, BrowserModule]
            },] },
];
/**
 * @nocollapse
 */
TabsModule.ctorParameters = () => [];

// Public classes.

/**
 * Entry point for all public APIs of the package.
 */

/**
 * Generated bundle index. Do not edit.
 */

export { TabsetComponent, TabHeadingDirective, TabComponent, TabTranscludeDirective, TabsModule };
//# sourceMappingURL=ngx-tabset.js.map
