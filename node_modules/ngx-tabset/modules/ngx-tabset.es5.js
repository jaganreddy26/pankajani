import { Component, ContentChild, ContentChildren, Directive, EventEmitter, Input, NgModule, Output, TemplateRef, ViewContainerRef } from '@angular/core';
import { animate, style, transition, trigger } from '@angular/animations';
import { CommonModule } from '@angular/common';
import { BrowserModule } from '@angular/platform-browser';
var TabHeadingDirective = (function () {
    /**
     * @param {?} templateRef
     */
    function TabHeadingDirective(templateRef) {
        this.templateRef = templateRef;
    }
    return TabHeadingDirective;
}());
TabHeadingDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tabHeading]"
            },] },
];
/**
 * @nocollapse
 */
TabHeadingDirective.ctorParameters = function () { return [
    { type: TemplateRef, },
]; };
var TabComponent = (function () {
    function TabComponent() {
        this.active = false;
        this.disabled = false;
    }
    Object.defineProperty(TabComponent.prototype, "headingTemplate", {
        /**
         * @return {?}
         */
        get: function () {
            return this.heading ? this.heading.templateRef : null;
        },
        enumerable: true,
        configurable: true
    });
    return TabComponent;
}());
TabComponent.decorators = [
    { type: Component, args: [{
                animations: [
                    trigger('myAnimation', [
                        transition(':enter', [
                            style({ opacity: 0 }),
                            animate('200ms')
                        ]),
                        transition(':leave', [
                            style({ opacity: 1 }),
                            animate('200ms')
                        ])
                    ])
                ],
                selector: "ngx-tab",
                template: "\n    <div *ngIf=\"active\" [@myAnimation]=\"active\">\n      <ng-content></ng-content>\n    </div>\n  "
            },] },
];
/**
 * @nocollapse
 */
TabComponent.ctorParameters = function () { return []; };
TabComponent.propDecorators = {
    'heading': [{ type: ContentChild, args: [TabHeadingDirective,] },],
    'title': [{ type: Input },],
    'active': [{ type: Input },],
    'disabled': [{ type: Input },],
};
var TabsetComponent = (function () {
    function TabsetComponent() {
        this.animate = true;
        this.customNavClass = '';
        this.customTabsClass = '';
        this.onSelect = new EventEmitter(false);
    }
    /**
     * @param {?} tab
     * @return {?}
     */
    TabsetComponent.prototype.changeActiveTab = function (tab) {
        if (!tab.disabled && !tab.active) {
            var /** @type {?} */ me_1 = this;
            var /** @type {?} */ tabs_1 = this.tabs.toArray();
            tabs_1.forEach(function (t) { return t.active = false; });
            if (this.animate) {
                setTimeout(function () {
                    tab.active = true;
                    me_1.onSelect.emit(tabs_1.indexOf(tab));
                }, 201);
            }
            else {
                tab.active = true;
                me_1.onSelect.emit(tabs_1.indexOf(tab));
            }
        }
    };
    /**
     * @return {?}
     */
    TabsetComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        setTimeout(function () {
            var /** @type {?} */ readTabs = _this.tabs.toArray();
            var /** @type {?} */ activeTab = readTabs.find(function (tab) { return tab.active === true; });
            if (!activeTab && readTabs.length > 0) {
                readTabs[0].active = true;
            }
        });
    };
    return TabsetComponent;
}());
TabsetComponent.decorators = [
    { type: Component, args: [{
                selector: "ngx-tabset",
                template: "\n    <style>\n      .tabset-style ul.tabset-header {\n        list-style: none;\n        margin: 0;\n        padding: 0;\n        display: flex;\n      }\n\n      .tabset-style ul.tabset-header li {\n        padding: 12px;\n      }\n\n      /* Optional style that can be disabled */\n      .tabset-style ul.tabset-header li:hover {\n        cursor: pointer;\n        -moz-box-shadow: inset 0 -4px 0 0 lightgray;\n        -webkit-box-shadow: inset 0 -4px 0 0 lightgray;\n        box-shadow: inset 0 -4px 0 0 lightgray;\n      }\n\n      .tabset-style ul.tabset-header li.disabled {\n        opacity: .4;\n      }\n\n      .tabset-style ul.tabset-header li.disabled:hover {\n        -moz-box-shadow: none;\n        -webkit-box-shadow: none;\n        box-shadow: none;\n        cursor: not-allowed;\n      }\n\n      .tabset-style ul.tabset-header li.active {\n        -moz-box-shadow: inset 0 -4px 0 0 blue;\n        -webkit-box-shadow: inset 0 -4px 0 0 blue;\n        box-shadow: inset 0 -4px 0 0 blue;\n      }\n\n      .tabset-content {\n      }\n    </style>\n    <nav [ngClass]=\"{'tabset-style': !disableStyle}\">\n      <ul class=\"tabset-header\" [ngClass]=\"customNavClass\">\n        <li role=\"presentation\" *ngFor=\"let tab of tabs\" [class.active]=\"tab.active\"\n            [class.disabled]=\"tab.disabled\" (click)=\"changeActiveTab(tab)\">\n          <span [tabTransclude]=\"tab.headingTemplate\">{{ tab.title }}</span>\n        </li>\n      </ul>\n    </nav>\n    <div class=\"tabs-container\" [ngClass]=\"customTabsClass\" [@.disabled]=\"!animate\">\n      <div class=\"tabset-content\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n  "
            },] },
];
/**
 * @nocollapse
 */
TabsetComponent.ctorParameters = function () { return []; };
TabsetComponent.propDecorators = {
    'disableStyle': [{ type: Input },],
    'animate': [{ type: Input },],
    'customNavClass': [{ type: Input },],
    'customTabsClass': [{ type: Input },],
    'tabs': [{ type: ContentChildren, args: [TabComponent,] },],
    'onSelect': [{ type: Output },],
};
var TabTranscludeDirective = (function () {
    /**
     * @param {?} viewRef
     */
    function TabTranscludeDirective(viewRef) {
        this.viewRef = viewRef;
    }
    Object.defineProperty(TabTranscludeDirective.prototype, "tabTransclude", {
        /**
         * @return {?}
         */
        get: function () {
            return this.tabReference;
        },
        /**
         * @param {?} templateRef
         * @return {?}
         */
        set: function (templateRef) {
            this.tabReference = templateRef;
            if (templateRef) {
                this.viewRef.createEmbeddedView(templateRef);
            }
        },
        enumerable: true,
        configurable: true
    });
    return TabTranscludeDirective;
}());
TabTranscludeDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tabTransclude]"
            },] },
];
/**
 * @nocollapse
 */
TabTranscludeDirective.ctorParameters = function () { return [
    { type: ViewContainerRef, },
]; };
TabTranscludeDirective.propDecorators = {
    'tabTransclude': [{ type: Input },],
};
var TabsModule = (function () {
    function TabsModule() {
    }
    /**
     * Use in AppModule: new instance of SumService.
     * @return {?}
     */
    TabsModule.forRoot = function () {
        return {
            ngModule: TabsModule,
            providers: []
        };
    };
    /**
     * Use in features modules with lazy loading: new instance of SumService.
     * @return {?}
     */
    TabsModule.forChild = function () {
        return {
            ngModule: TabsModule,
            providers: []
        };
    };
    return TabsModule;
}());
TabsModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    TabComponent,
                    TabHeadingDirective,
                    TabsetComponent,
                    TabTranscludeDirective
                ],
                exports: [
                    TabComponent,
                    TabHeadingDirective,
                    TabsetComponent,
                ],
                imports: [CommonModule, BrowserModule]
            },] },
];
/**
 * @nocollapse
 */
TabsModule.ctorParameters = function () { return []; };
// Public classes.
/**
 * Entry point for all public APIs of the package.
 */
/**
 * Generated bundle index. Do not edit.
 */
export { TabsetComponent, TabHeadingDirective, TabComponent, TabTranscludeDirective, TabsModule };
//# sourceMappingURL=ngx-tabset.es5.js.map
