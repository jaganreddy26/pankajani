/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, ElementRef, EventEmitter, forwardRef, Input, Output, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR, Validators } from '@angular/forms';
import { defaultSettings } from '../../settings/default.settings';
import { FormBuilder } from '@angular/forms';
import { InputFileRejectedReason } from '../../enums/input-file-rejected-reason';
import { InputFileService } from '../../services/input-file.service';
import { urlValidator } from '../../validators/url.validator';
var InputFileComponent = /** @class */ (function () {
    function InputFileComponent(formBuilder, inputFileService) {
        this.formBuilder = formBuilder;
        this.inputFileService = inputFileService;
        this.acceptedFile = new EventEmitter();
        this.deletedFile = new EventEmitter();
        this.rejectedFile = new EventEmitter();
        this.files = new Array();
        this.id = "ngx-input-file-" + InputFileComponent.nextId++;
        this.onChange = function (files) { };
        this.onTouched = function () { };
    }
    Object.defineProperty(InputFileComponent.prototype, "fileAccept", {
        get: /**
         * @return {?}
         */
        function () {
            return this._fileAccept || this.inputFileService.config.fileAccept || defaultSettings.fileAccept;
        },
        set: /**
         * @param {?} fileAccept
         * @return {?}
         */
        function (fileAccept) {
            this._fileAccept = fileAccept;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputFileComponent.prototype, "fileLimit", {
        get: /**
         * @return {?}
         */
        function () {
            return this._fileLimit || this.inputFileService.config.fileLimit || defaultSettings.fileLimit;
        },
        set: /**
         * @param {?} fileLimit
         * @return {?}
         */
        function (fileLimit) {
            this._fileLimit = fileLimit;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputFileComponent.prototype, "iconAdd", {
        get: /**
         * @return {?}
         */
        function () {
            return this._iconAdd || this.inputFileService.config.iconAdd || defaultSettings.iconAdd;
        },
        set: /**
         * @param {?} iconAdd
         * @return {?}
         */
        function (iconAdd) {
            this._iconAdd = iconAdd;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputFileComponent.prototype, "iconDelete", {
        get: /**
         * @return {?}
         */
        function () {
            return this._iconDelete || this.inputFileService.config.iconDelete || defaultSettings.iconDelete;
        },
        set: /**
         * @param {?} iconDelete
         * @return {?}
         */
        function (iconDelete) {
            this._iconDelete = iconDelete;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputFileComponent.prototype, "iconFile", {
        get: /**
         * @return {?}
         */
        function () {
            return this._iconFile || this.inputFileService.config.iconFile || defaultSettings.iconFile;
        },
        set: /**
         * @param {?} iconFile
         * @return {?}
         */
        function (iconFile) {
            this._iconFile = iconFile;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputFileComponent.prototype, "iconLink", {
        get: /**
         * @return {?}
         */
        function () {
            return this._iconLink || this.inputFileService.config.iconLink || defaultSettings.iconLink;
        },
        set: /**
         * @param {?} iconLink
         * @return {?}
         */
        function (iconLink) {
            this._iconLink = iconLink;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputFileComponent.prototype, "linkEnabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._linkEnabled || this.inputFileService.config.linkEnabled || defaultSettings.linkEnabled;
        },
        set: /**
         * @param {?} linkEnabled
         * @return {?}
         */
        function (linkEnabled) {
            this._linkEnabled = linkEnabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputFileComponent.prototype, "placeholderLink", {
        get: /**
         * @return {?}
         */
        function () {
            return this._placeholderLink || this.inputFileService.config.placeholderLink || defaultSettings.placeholderLink;
        },
        set: /**
         * @param {?} placeholderLink
         * @return {?}
         */
        function (placeholderLink) {
            this._placeholderLink = placeholderLink;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputFileComponent.prototype, "sizeLimit", {
        get: /**
         * @return {?}
         */
        function () {
            return this._sizeLimit || this.inputFileService.config.sizeLimit || defaultSettings.sizeLimit;
        },
        set: /**
         * @param {?} sizeLimit
         * @return {?}
         */
        function (sizeLimit) {
            this._sizeLimit = sizeLimit;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputFileComponent.prototype, "canAddFile", {
        get: /**
         * @return {?}
         */
        function () {
            return this.files && this.files.length < this.fileLimit;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Angular lifecyle OnInit implementation.
     * @return {?}
     */
    InputFileComponent.prototype.ngOnInit = /**
     * Angular lifecyle OnInit implementation.
     * @return {?}
     */
    function () {
        this.setForm();
    };
    /**
     * On delete a file event handler.
     * @param {?} index
     * @return {?}
     */
    InputFileComponent.prototype.onDeleteFile = /**
     * On delete a file event handler.
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (!this.disabled) {
            var /** @type {?} */ files = this.files.slice();
            this.deletedFile.emit(files[index]);
            files.splice(index, 1);
            this.writeValue(files);
        }
    };
    /**
     * On drag over event handler.
     * Adds a ripple effect on the button.
     * @param {?} button
     * @return {?}
     */
    InputFileComponent.prototype.onDragOver = /**
     * On drag over event handler.
     * Adds a ripple effect on the button.
     * @param {?} button
     * @return {?}
     */
    function (button) {
        button.ripple.launch({ centered: true, persistent: true });
    };
    /**
     * On drag leave event handler.
     * Fades the ripple effect of the button.
     * @param {?} button
     * @return {?}
     */
    InputFileComponent.prototype.onDragLeave = /**
     * On drag leave event handler.
     * Fades the ripple effect of the button.
     * @param {?} button
     * @return {?}
     */
    function (button) {
        button.ripple.fadeOutAll();
    };
    /**
     * On adds a link.
     * @return {?}
     */
    InputFileComponent.prototype.onLink = /**
     * On adds a link.
     * @return {?}
     */
    function () {
        this.addLink = !this.addLink;
    };
    /**
     * On replace one file event handler.
     * Writes the value.
     * @param {?} fileList
     * @param {?} index
     * @param {?} button
     * @param {?=} fileInput
     * @return {?}
     */
    InputFileComponent.prototype.onReplaceFile = /**
     * On replace one file event handler.
     * Writes the value.
     * @param {?} fileList
     * @param {?} index
     * @param {?} button
     * @param {?=} fileInput
     * @return {?}
     */
    function (fileList, index, button, fileInput) {
        if (!this.disabled) {
            // Copies the array without reference.
            var /** @type {?} */ files = this.files.slice();
            // Assumes that a single file can be replaced by a single file.
            var /** @type {?} */ inputFile = { file: fileList.item(0) };
            button.ripple.fadeOutAll();
            if (this.fileGuard(files, inputFile, true)) {
                files[index] = inputFile;
                this.acceptedFile.emit(inputFile);
            }
            this.writeValue(files);
            if (fileInput) {
                fileInput.value = '';
            }
        }
    };
    /**
     * On select one or more files event handler.
     * Writes the value.
     * @param {?} fileList
     * @param {?} button
     * @return {?}
     */
    InputFileComponent.prototype.onSelectFile = /**
     * On select one or more files event handler.
     * Writes the value.
     * @param {?} fileList
     * @param {?} button
     * @return {?}
     */
    function (fileList, button) {
        var _this = this;
        if (!this.disabled) {
            button.ripple.fadeOutAll();
            // Copies the array without reference.
            var /** @type {?} */ files_1 = this.files.slice();
            Array.from(fileList).forEach(function (file) {
                var /** @type {?} */ inputFile = { file: file };
                if (_this.fileGuard(files_1, inputFile)) {
                    files_1.push(inputFile);
                    _this.acceptedFile.emit(inputFile);
                }
            });
            this.writeValue(files_1);
            this.fileInput.nativeElement.value = '';
        }
    };
    /**
     * On submit the link form event handler.
     * @return {?}
     */
    InputFileComponent.prototype.onSubmitLink = /**
     * On submit the link form event handler.
     * @return {?}
     */
    function () {
        if (!this.disabled && this.form.valid) {
            var /** @type {?} */ files = this.files.slice();
            var /** @type {?} */ inputFile = { link: this.form.value.link, preview: this.form.value.link };
            files.push(inputFile);
            this.acceptedFile.emit(inputFile);
            this.onLink();
            this.form.reset();
            this.writeValue(files);
        }
    };
    /**
     * Implementation of ControlValueAccessor.
     * @param {?} fn
     * @return {?}
     */
    InputFileComponent.prototype.registerOnChange = /**
     * Implementation of ControlValueAccessor.
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * Implementation of ControlValueAccessor.
     * @param {?} fn
     * @return {?}
     */
    InputFileComponent.prototype.registerOnTouched = /**
     * Implementation of ControlValueAccessor.
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * Implementation of ControlValueAccessor.
     * @param {?} isDisabled
     * @return {?}
     */
    InputFileComponent.prototype.setDisabledState = /**
     * Implementation of ControlValueAccessor.
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * Implementation of ControlValueAccessor.
     * @param {?} files
     * @return {?}
     */
    InputFileComponent.prototype.writeValue = /**
     * Implementation of ControlValueAccessor.
     * @param {?} files
     * @return {?}
     */
    function (files) {
        if (!this.disabled) {
            this.files = files;
            this.setFilePreview();
            this.onChange(this.files);
        }
    };
    /**
     * Whether the file can be added to the model.
     * @param {?} files
     * @param {?} file
     * @param {?=} bypassLimit
     * @return {?}
     */
    InputFileComponent.prototype.fileGuard = /**
     * Whether the file can be added to the model.
     * @param {?} files
     * @param {?} file
     * @param {?=} bypassLimit
     * @return {?}
     */
    function (files, file, bypassLimit) {
        if (!bypassLimit && !this.inputFileService.limitGuard(files, this.fileLimit)) {
            this.rejectedFile.emit({ reason: InputFileRejectedReason.limitReached, file: file });
            return false;
        }
        if (!this.inputFileService.sizeGuard(file.file, this.sizeLimit)) {
            this.rejectedFile.emit({ reason: InputFileRejectedReason.sizeReached, file: file });
            return false;
        }
        if (!this.inputFileService.typeGuard(file.file, this.fileAccept)) {
            this.rejectedFile.emit({ reason: InputFileRejectedReason.badFile, file: file });
            return false;
        }
        return true;
    };
    /**
     * Sets the file preview with FileReader.
     * @return {?}
     */
    InputFileComponent.prototype.setFilePreview = /**
     * Sets the file preview with FileReader.
     * @return {?}
     */
    function () {
        var _this = this;
        var _loop_1 = function (index) {
            if (this_1.files[index].file != null && this_1.inputFileService.typeGuard(this_1.files[index].file, 'image/*')) {
                var /** @type {?} */ fr_1 = new FileReader();
                fr_1.onload = function () {
                    _this.files[index].preview = fr_1.result;
                };
                fr_1.readAsDataURL(this_1.files[index].file);
            }
        };
        var this_1 = this;
        for (var /** @type {?} */ index in this.files) {
            _loop_1(index);
        }
    };
    /**
     * Sets the reactive form to insert a link.
     * @return {?}
     */
    InputFileComponent.prototype.setForm = /**
     * Sets the reactive form to insert a link.
     * @return {?}
     */
    function () {
        this.form = this.formBuilder.group({
            link: ['', [Validators.required, urlValidator]]
        });
    };
    InputFileComponent.nextId = 0;
    InputFileComponent.decorators = [
        { type: Component, args: [{
                    selector: 'input-file',
                    template: "<div class=\"input-file-container\">\n    <label class=\"mat-orphan-label\" [for]=\"id\" [class.active]=\"files?.length\" [innerHtml]=\"placeholder\" *ngIf=\"placeholder\"></label>\n    <div class=\"files-container\">\n\n        <ng-container *ngFor=\"let file of files; let i = index\">\n            <div class=\"file-container bounce-in\">\n                <ng-container *ngTemplateOutlet=\"fileTemplate; context: { $implicit: file, index: i }\"></ng-container>\n            </div>\n        </ng-container>\n\n        <ng-container *ngIf=\"canAddFile\">\n            <div class=\"file-container\">\n                <ng-container *ngIf=\"!addLink; else linkTemplate\">\n                    <ng-container *ngTemplateOutlet=\"addTemplate\"></ng-container>\n                </ng-container>\n            </div>\n        </ng-container>\n    </div>\n\n</div>\n\n<ng-template #addTemplate>\n    <button mat-button inputFileDropZone class=\"file-button\" type=\"button\" (click)=\"fileInput.click()\" (itemDrop)=\"onSelectFile($event, selectButton)\"\n        (itemDragOver)=\"onDragOver(selectButton)\" (itemDragLeave)=\"onDragLeave(selectButton)\" [disabled]=\"disabled\" #selectButton>\n        <mat-icon class=\"input-icon\">{{ iconAdd }}</mat-icon>\n    </button>\n    <button mat-button class=\"secondary-button\" type=\"button\" [disabled]=\"disabled\" (click)=\"onLink()\" *ngIf=\"linkEnabled\">\n        <mat-icon>{{ iconLink }}</mat-icon>\n    </button>\n    <input [id]=\"id\" [accept]=\"fileAccept\" hidden type=\"file\" [attr.multiple]=\"fileLimit > 1 ? true : null\" #fileInput (change)=\"onSelectFile($event.target.files, selectButton)\">\n</ng-template>\n\n<ng-template #fileTemplate let-file let-index=\"index\">\n    <button mat-button inputFileDropZone class=\"replace-button\" type=\"button\" (click)=\"fileReplace.click()\" (itemDrop)=\"onReplaceFile($event, index, replaceButton)\"\n        [disabled]=\"disabled\" (itemDragOver)=\"onDragOver(replaceButton)\" (itemDragLeave)=\"onDragLeave(replaceButton)\" #replaceButton>\n        <img class=\"image-preview\" [src]=\"file.preview\" *ngIf=\"file.preview; else noPreview\">\n        <ng-template #noPreview>\n            <mat-icon class=\"input-icon\">{{ iconFile }}</mat-icon>\n            <div class=\"file-name text-truncate\" [innerHtml]=\"file.file.name\" *ngIf=\"file.file\"></div>\n        </ng-template>\n    </button>\n    <button mat-button class=\"secondary-button\" type=\"button\" (click)=\"onDeleteFile(index)\" [disabled]=\"disabled\">\n        <mat-icon>{{ iconDelete }}</mat-icon>\n    </button>\n    <input [accept]=\"fileAccept\" hidden type=\"file\" #fileReplace (change)=\"onReplaceFile($event.target.files, index, replaceButton, fileReplace)\">\n</ng-template>\n\n<ng-template #linkTemplate>\n    <form class=\"form-link slide-in-up\" [formGroup]=\"form\" (ngSubmit)=\"onSubmitLink()\" novalidate>\n        <mat-form-field class=\"input-link\">\n            <input matInput formControlName=\"link\" [placeholder]=\"placeholderLink\">\n        </mat-form-field>\n        <div class=\"form-link-button\">\n            <button mat-button type=\"button\" (click)=\"onLink()\" [disabled]=\"disabled\">\n                <mat-icon>arrow_back</mat-icon>\n            </button>\n            <button mat-button type=\"submit\" [disabled]=\"disabled\">\n                <mat-icon>check</mat-icon>\n            </button>\n        </div>\n    </form>\n</ng-template>",
                    styles: [".input-file-container{position:relative}.input-file-container .files-container{display:flex;flex-direction:row;flex-wrap:wrap;padding-top:1.25rem}.input-file-container .file-button,.input-file-container .file-container{align-items:center;display:flex;height:10rem;justify-content:center;width:10rem}.input-file-container .secondary-button{width:10rem}.input-file-container .file-button{flex:1}.input-file-container .file-container{flex-direction:column;margin-right:1rem}.input-file-container .replace-button{flex:1;width:10rem}.input-file-container .mat-button:focus{outline:0}.input-file-container .file-name{width:calc(10rem - 2.5rem)}.input-file-container .image-preview{margin:0 -16px;height:10rem;-o-object-fit:contain;object-fit:contain;width:10rem}.input-file-container .input-icon{font-size:calc(10rem / 4);height:calc(10rem / 4);width:calc(10rem / 4)}.input-file-container .form-link{display:flex;flex-direction:column;width:10rem}.input-file-container .input-link{width:10rem}.input-file-container .form-link-button{display:flex;flex-direction:row}.input-file-container .form-link-button .mat-button{min-width:calc(10rem / 2);width:calc(10rem / 2)}.input-file-container .mat-orphan-label{color:rgba(0,0,0,.54);display:block;font-size:1rem;left:0;margin:0;position:absolute;top:0;-webkit-transform-origin:0;transform-origin:0;transition:.4s cubic-bezier(.25,.8,.25,1),width .4s cubic-bezier(.25,.8,.25,1)}.input-file-container .mat-orphan-label.active{-webkit-transform:scale(.75);transform:scale(.75)}@-webkit-keyframes bounceIn{20%,40%,60%,80%,from,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{opacity:0;-webkit-transform:scale3d(.3,.3,.3);transform:scale3d(.3,.3,.3)}20%{-webkit-transform:scale3d(1.1,1.1,1.1);transform:scale3d(1.1,1.1,1.1)}40%{-webkit-transform:scale3d(.9,.9,.9);transform:scale3d(.9,.9,.9)}60%{opacity:1;-webkit-transform:scale3d(1.03,1.03,1.03);transform:scale3d(1.03,1.03,1.03)}80%{-webkit-transform:scale3d(.97,.97,.97);transform:scale3d(.97,.97,.97)}to{opacity:1;-webkit-transform:scale3d(1,1,1);transform:scale3d(1,1,1)}}@keyframes bounceIn{20%,40%,60%,80%,from,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{opacity:0;-webkit-transform:scale3d(.3,.3,.3);transform:scale3d(.3,.3,.3)}20%{-webkit-transform:scale3d(1.1,1.1,1.1);transform:scale3d(1.1,1.1,1.1)}40%{-webkit-transform:scale3d(.9,.9,.9);transform:scale3d(.9,.9,.9)}60%{opacity:1;-webkit-transform:scale3d(1.03,1.03,1.03);transform:scale3d(1.03,1.03,1.03)}80%{-webkit-transform:scale3d(.97,.97,.97);transform:scale3d(.97,.97,.97)}to{opacity:1;-webkit-transform:scale3d(1,1,1);transform:scale3d(1,1,1)}}.bounce-in{-webkit-animation-duration:.75s;animation-duration:.75s;-webkit-animation-name:bounceIn;animation-name:bounceIn}@-webkit-keyframes slideInUp{from{opacity:0;-webkit-transform:translate3d(0,100%,0);transform:translate3d(0,100%,0)}to{opacity:1;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}}@keyframes slideInUp{from{opacity:0;-webkit-transform:translate3d(0,100%,0);transform:translate3d(0,100%,0)}to{opacity:1;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}}.slide-in-up{-webkit-animation-duration:.25s;animation-duration:.25s;-webkit-animation-name:slideInUp;animation-name:slideInUp}"],
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return InputFileComponent; }),
                            multi: true
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    InputFileComponent.ctorParameters = function () { return [
        { type: FormBuilder },
        { type: InputFileService }
    ]; };
    InputFileComponent.propDecorators = {
        disabled: [{ type: Input }],
        placeholder: [{ type: Input }],
        fileAccept: [{ type: Input }],
        fileLimit: [{ type: Input }],
        iconAdd: [{ type: Input }],
        iconDelete: [{ type: Input }],
        iconFile: [{ type: Input }],
        iconLink: [{ type: Input }],
        linkEnabled: [{ type: Input }],
        placeholderLink: [{ type: Input }],
        sizeLimit: [{ type: Input }],
        acceptedFile: [{ type: Output }],
        deletedFile: [{ type: Output }],
        rejectedFile: [{ type: Output }],
        fileInput: [{ type: ViewChild, args: ['fileInput',] }]
    };
    return InputFileComponent;
}());
export { InputFileComponent };
function InputFileComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    InputFileComponent.nextId;
    /** @type {?} */
    InputFileComponent.prototype._fileAccept;
    /** @type {?} */
    InputFileComponent.prototype._fileLimit;
    /** @type {?} */
    InputFileComponent.prototype._iconAdd;
    /** @type {?} */
    InputFileComponent.prototype._iconDelete;
    /** @type {?} */
    InputFileComponent.prototype._iconFile;
    /** @type {?} */
    InputFileComponent.prototype._iconLink;
    /** @type {?} */
    InputFileComponent.prototype._linkEnabled;
    /** @type {?} */
    InputFileComponent.prototype._placeholderLink;
    /** @type {?} */
    InputFileComponent.prototype._sizeLimit;
    /** @type {?} */
    InputFileComponent.prototype.disabled;
    /** @type {?} */
    InputFileComponent.prototype.placeholder;
    /** @type {?} */
    InputFileComponent.prototype.acceptedFile;
    /** @type {?} */
    InputFileComponent.prototype.deletedFile;
    /** @type {?} */
    InputFileComponent.prototype.rejectedFile;
    /** @type {?} */
    InputFileComponent.prototype.fileInput;
    /** @type {?} */
    InputFileComponent.prototype.addLink;
    /** @type {?} */
    InputFileComponent.prototype.files;
    /** @type {?} */
    InputFileComponent.prototype.form;
    /** @type {?} */
    InputFileComponent.prototype.id;
    /** @type {?} */
    InputFileComponent.prototype.onChange;
    /** @type {?} */
    InputFileComponent.prototype.onTouched;
    /** @type {?} */
    InputFileComponent.prototype.formBuilder;
    /** @type {?} */
    InputFileComponent.prototype.inputFileService;
}

//# sourceMappingURL=data:application/json;base64,