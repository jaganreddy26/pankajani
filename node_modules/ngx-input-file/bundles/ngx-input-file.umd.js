(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/common'), require('@angular/material/button'), require('@angular/material/form-field'), require('@angular/material/icon'), require('@angular/material/input')) :
    typeof define === 'function' && define.amd ? define('ngx-input-file', ['exports', '@angular/core', '@angular/forms', '@angular/common', '@angular/material/button', '@angular/material/form-field', '@angular/material/icon', '@angular/material/input'], factory) :
    (factory((global['ngx-input-file'] = {}),global.ng.core,global.ng.forms,global.ng.common,global.ng.material.button,global.ng.material['form-field'],global.ng.material.icon,global.ng.material.input));
}(this, (function (exports,i0,forms,common,button,formField,icon,input) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ defaultSettings = {
        fileAccept: '*',
        fileLimit: 1,
        iconAdd: 'add',
        iconDelete: 'delete',
        iconFile: 'insert_drive_file',
        iconLink: 'link',
        linkEnabled: false,
        placeholderLink: 'Link',
        sizeLimit: null
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @enum {number} */
    var InputFileRejectedReason = {
        badFile: 0,
        limitReached: 1,
        sizeReached: 2,
    };
    InputFileRejectedReason[InputFileRejectedReason.badFile] = "badFile";
    InputFileRejectedReason[InputFileRejectedReason.limitReached] = "limitReached";
    InputFileRejectedReason[InputFileRejectedReason.sizeReached] = "sizeReached";

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var InputFileService = (function () {
        function InputFileService(_config) {
            this._config = _config;
        }
        Object.defineProperty(InputFileService.prototype, "config", {
            get: /**
             * @return {?}
             */ function () {
                return this._config;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Whether the limit is not reached.
         * @param {?} files
         * @param {?} fileLimit
         * @return {?}
         */
        InputFileService.prototype.limitGuard = /**
         * Whether the limit is not reached.
         * @param {?} files
         * @param {?} fileLimit
         * @return {?}
         */
            function (files, fileLimit) {
                return files.length < fileLimit;
            };
        /**
         * Whether the file size is not bigger than the limit.
         * @param {?} file
         * @param {?} sizeLimit
         * @return {?}
         */
        InputFileService.prototype.sizeGuard = /**
         * Whether the file size is not bigger than the limit.
         * @param {?} file
         * @param {?} sizeLimit
         * @return {?}
         */
            function (file, sizeLimit) {
                return !sizeLimit || file.size < sizeLimit * 1024 * 1024; // TODO : improve
            };
        /**
         * Whether the type of the file is enabled.
         * @param {?} file
         * @param {?} fileAccept
         * @return {?}
         */
        InputFileService.prototype.typeGuard = /**
         * Whether the type of the file is enabled.
         * @param {?} file
         * @param {?} fileAccept
         * @return {?}
         */
            function (file, fileAccept) {
                var /** @type {?} */ enabled = fileAccept == null;
                if (fileAccept) {
                    var /** @type {?} */ accept = fileAccept.replace('*', '');
                    var /** @type {?} */ types = accept.split(',');
                    try {
                        for (var types_1 = __values(types), types_1_1 = types_1.next(); !types_1_1.done; types_1_1 = types_1.next()) {
                            var type = types_1_1.value;
                            if (file.type.startsWith(type) || (type.charAt(0) === '.' && file.name != null && file.name.endsWith(type))) {
                                enabled = true;
                                break;
                            }
                        }
                    }
                    catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    }
                    finally {
                        try {
                            if (types_1_1 && !types_1_1.done && (_a = types_1.return))
                                _a.call(types_1);
                        }
                        finally {
                            if (e_1)
                                throw e_1.error;
                        }
                    }
                }
                return enabled;
                var e_1, _a;
            };
        InputFileService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] },
        ];
        /** @nocollapse */
        InputFileService.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: i0.Inject, args: ['config',] }] }
            ];
        };
        /** @nocollapse */ InputFileService.ngInjectableDef = i0.defineInjectable({ factory: function InputFileService_Factory() { return new InputFileService(i0.inject("config")); }, token: InputFileService, providedIn: "root" });
        return InputFileService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} control
     * @return {?}
     */
    function urlValidator(control) {
        if (forms.Validators.required(control) != null) {
            return null;
        }
        var /** @type {?} */ v = control.value;
        /* tslint:disable */
        return /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(v) ? null : { 'url': true };
        /* tslint:enable */
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var InputFileComponent = (function () {
        function InputFileComponent(formBuilder, inputFileService) {
            this.formBuilder = formBuilder;
            this.inputFileService = inputFileService;
            this.acceptedFile = new i0.EventEmitter();
            this.deletedFile = new i0.EventEmitter();
            this.rejectedFile = new i0.EventEmitter();
            this.files = new Array();
            this.id = "ngx-input-file-" + InputFileComponent.nextId++;
            this.onChange = function (files) { };
            this.onTouched = function () { };
        }
        Object.defineProperty(InputFileComponent.prototype, "fileAccept", {
            get: /**
             * @return {?}
             */ function () {
                return this._fileAccept || this.inputFileService.config.fileAccept || defaultSettings.fileAccept;
            },
            set: /**
             * @param {?} fileAccept
             * @return {?}
             */ function (fileAccept) {
                this._fileAccept = fileAccept;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputFileComponent.prototype, "fileLimit", {
            get: /**
             * @return {?}
             */ function () {
                return this._fileLimit || this.inputFileService.config.fileLimit || defaultSettings.fileLimit;
            },
            set: /**
             * @param {?} fileLimit
             * @return {?}
             */ function (fileLimit) {
                this._fileLimit = fileLimit;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputFileComponent.prototype, "iconAdd", {
            get: /**
             * @return {?}
             */ function () {
                return this._iconAdd || this.inputFileService.config.iconAdd || defaultSettings.iconAdd;
            },
            set: /**
             * @param {?} iconAdd
             * @return {?}
             */ function (iconAdd) {
                this._iconAdd = iconAdd;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputFileComponent.prototype, "iconDelete", {
            get: /**
             * @return {?}
             */ function () {
                return this._iconDelete || this.inputFileService.config.iconDelete || defaultSettings.iconDelete;
            },
            set: /**
             * @param {?} iconDelete
             * @return {?}
             */ function (iconDelete) {
                this._iconDelete = iconDelete;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputFileComponent.prototype, "iconFile", {
            get: /**
             * @return {?}
             */ function () {
                return this._iconFile || this.inputFileService.config.iconFile || defaultSettings.iconFile;
            },
            set: /**
             * @param {?} iconFile
             * @return {?}
             */ function (iconFile) {
                this._iconFile = iconFile;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputFileComponent.prototype, "iconLink", {
            get: /**
             * @return {?}
             */ function () {
                return this._iconLink || this.inputFileService.config.iconLink || defaultSettings.iconLink;
            },
            set: /**
             * @param {?} iconLink
             * @return {?}
             */ function (iconLink) {
                this._iconLink = iconLink;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputFileComponent.prototype, "linkEnabled", {
            get: /**
             * @return {?}
             */ function () {
                return this._linkEnabled || this.inputFileService.config.linkEnabled || defaultSettings.linkEnabled;
            },
            set: /**
             * @param {?} linkEnabled
             * @return {?}
             */ function (linkEnabled) {
                this._linkEnabled = linkEnabled;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputFileComponent.prototype, "placeholderLink", {
            get: /**
             * @return {?}
             */ function () {
                return this._placeholderLink || this.inputFileService.config.placeholderLink || defaultSettings.placeholderLink;
            },
            set: /**
             * @param {?} placeholderLink
             * @return {?}
             */ function (placeholderLink) {
                this._placeholderLink = placeholderLink;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputFileComponent.prototype, "sizeLimit", {
            get: /**
             * @return {?}
             */ function () {
                return this._sizeLimit || this.inputFileService.config.sizeLimit || defaultSettings.sizeLimit;
            },
            set: /**
             * @param {?} sizeLimit
             * @return {?}
             */ function (sizeLimit) {
                this._sizeLimit = sizeLimit;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputFileComponent.prototype, "canAddFile", {
            get: /**
             * @return {?}
             */ function () {
                return this.files && this.files.length < this.fileLimit;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Angular lifecyle OnInit implementation.
         * @return {?}
         */
        InputFileComponent.prototype.ngOnInit = /**
         * Angular lifecyle OnInit implementation.
         * @return {?}
         */
            function () {
                this.setForm();
            };
        /**
         * On delete a file event handler.
         * @param {?} index
         * @return {?}
         */
        InputFileComponent.prototype.onDeleteFile = /**
         * On delete a file event handler.
         * @param {?} index
         * @return {?}
         */
            function (index) {
                if (!this.disabled) {
                    var /** @type {?} */ files = this.files.slice();
                    this.deletedFile.emit(files[index]);
                    files.splice(index, 1);
                    this.writeValue(files);
                }
            };
        /**
         * On drag over event handler.
         * Adds a ripple effect on the button.
         * @param {?} button
         * @return {?}
         */
        InputFileComponent.prototype.onDragOver = /**
         * On drag over event handler.
         * Adds a ripple effect on the button.
         * @param {?} button
         * @return {?}
         */
            function (button$$1) {
                button$$1.ripple.launch({ centered: true, persistent: true });
            };
        /**
         * On drag leave event handler.
         * Fades the ripple effect of the button.
         * @param {?} button
         * @return {?}
         */
        InputFileComponent.prototype.onDragLeave = /**
         * On drag leave event handler.
         * Fades the ripple effect of the button.
         * @param {?} button
         * @return {?}
         */
            function (button$$1) {
                button$$1.ripple.fadeOutAll();
            };
        /**
         * On adds a link.
         * @return {?}
         */
        InputFileComponent.prototype.onLink = /**
         * On adds a link.
         * @return {?}
         */
            function () {
                this.addLink = !this.addLink;
            };
        /**
         * On replace one file event handler.
         * Writes the value.
         * @param {?} fileList
         * @param {?} index
         * @param {?} button
         * @param {?=} fileInput
         * @return {?}
         */
        InputFileComponent.prototype.onReplaceFile = /**
         * On replace one file event handler.
         * Writes the value.
         * @param {?} fileList
         * @param {?} index
         * @param {?} button
         * @param {?=} fileInput
         * @return {?}
         */
            function (fileList, index, button$$1, fileInput) {
                if (!this.disabled) {
                    // Copies the array without reference.
                    var /** @type {?} */ files = this.files.slice();
                    // Assumes that a single file can be replaced by a single file.
                    var /** @type {?} */ inputFile = { file: fileList.item(0) };
                    button$$1.ripple.fadeOutAll();
                    if (this.fileGuard(files, inputFile, true)) {
                        files[index] = inputFile;
                        this.acceptedFile.emit(inputFile);
                    }
                    this.writeValue(files);
                    if (fileInput) {
                        fileInput.value = '';
                    }
                }
            };
        /**
         * On select one or more files event handler.
         * Writes the value.
         * @param {?} fileList
         * @param {?} button
         * @return {?}
         */
        InputFileComponent.prototype.onSelectFile = /**
         * On select one or more files event handler.
         * Writes the value.
         * @param {?} fileList
         * @param {?} button
         * @return {?}
         */
            function (fileList, button$$1) {
                var _this = this;
                if (!this.disabled) {
                    button$$1.ripple.fadeOutAll();
                    // Copies the array without reference.
                    var /** @type {?} */ files_1 = this.files.slice();
                    Array.from(fileList).forEach(function (file) {
                        var /** @type {?} */ inputFile = { file: file };
                        if (_this.fileGuard(files_1, inputFile)) {
                            files_1.push(inputFile);
                            _this.acceptedFile.emit(inputFile);
                        }
                    });
                    this.writeValue(files_1);
                    this.fileInput.nativeElement.value = '';
                }
            };
        /**
         * On submit the link form event handler.
         * @return {?}
         */
        InputFileComponent.prototype.onSubmitLink = /**
         * On submit the link form event handler.
         * @return {?}
         */
            function () {
                if (!this.disabled && this.form.valid) {
                    var /** @type {?} */ files = this.files.slice();
                    var /** @type {?} */ inputFile = { link: this.form.value.link, preview: this.form.value.link };
                    files.push(inputFile);
                    this.acceptedFile.emit(inputFile);
                    this.onLink();
                    this.form.reset();
                    this.writeValue(files);
                }
            };
        /**
         * Implementation of ControlValueAccessor.
         * @param {?} fn
         * @return {?}
         */
        InputFileComponent.prototype.registerOnChange = /**
         * Implementation of ControlValueAccessor.
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        /**
         * Implementation of ControlValueAccessor.
         * @param {?} fn
         * @return {?}
         */
        InputFileComponent.prototype.registerOnTouched = /**
         * Implementation of ControlValueAccessor.
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouched = fn;
            };
        /**
         * Implementation of ControlValueAccessor.
         * @param {?} isDisabled
         * @return {?}
         */
        InputFileComponent.prototype.setDisabledState = /**
         * Implementation of ControlValueAccessor.
         * @param {?} isDisabled
         * @return {?}
         */
            function (isDisabled) {
                this.disabled = isDisabled;
            };
        /**
         * Implementation of ControlValueAccessor.
         * @param {?} files
         * @return {?}
         */
        InputFileComponent.prototype.writeValue = /**
         * Implementation of ControlValueAccessor.
         * @param {?} files
         * @return {?}
         */
            function (files) {
                if (!this.disabled) {
                    this.files = files;
                    this.setFilePreview();
                    this.onChange(this.files);
                }
            };
        /**
         * Whether the file can be added to the model.
         * @param {?} files
         * @param {?} file
         * @param {?=} bypassLimit
         * @return {?}
         */
        InputFileComponent.prototype.fileGuard = /**
         * Whether the file can be added to the model.
         * @param {?} files
         * @param {?} file
         * @param {?=} bypassLimit
         * @return {?}
         */
            function (files, file, bypassLimit) {
                if (!bypassLimit && !this.inputFileService.limitGuard(files, this.fileLimit)) {
                    this.rejectedFile.emit({ reason: InputFileRejectedReason.limitReached, file: file });
                    return false;
                }
                if (!this.inputFileService.sizeGuard(file.file, this.sizeLimit)) {
                    this.rejectedFile.emit({ reason: InputFileRejectedReason.sizeReached, file: file });
                    return false;
                }
                if (!this.inputFileService.typeGuard(file.file, this.fileAccept)) {
                    this.rejectedFile.emit({ reason: InputFileRejectedReason.badFile, file: file });
                    return false;
                }
                return true;
            };
        /**
         * Sets the file preview with FileReader.
         * @return {?}
         */
        InputFileComponent.prototype.setFilePreview = /**
         * Sets the file preview with FileReader.
         * @return {?}
         */
            function () {
                var _this = this;
                var _loop_1 = function (index) {
                    if (this_1.files[index].file != null && this_1.inputFileService.typeGuard(this_1.files[index].file, 'image/*')) {
                        var /** @type {?} */ fr_1 = new FileReader();
                        fr_1.onload = function () {
                            _this.files[index].preview = fr_1.result;
                        };
                        fr_1.readAsDataURL(this_1.files[index].file);
                    }
                };
                var this_1 = this;
                for (var /** @type {?} */ index in this.files) {
                    _loop_1(index);
                }
            };
        /**
         * Sets the reactive form to insert a link.
         * @return {?}
         */
        InputFileComponent.prototype.setForm = /**
         * Sets the reactive form to insert a link.
         * @return {?}
         */
            function () {
                this.form = this.formBuilder.group({
                    link: ['', [forms.Validators.required, urlValidator]]
                });
            };
        InputFileComponent.nextId = 0;
        InputFileComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'input-file',
                        template: "<div class=\"input-file-container\">\n    <label class=\"mat-orphan-label\" [for]=\"id\" [class.active]=\"files?.length\" [innerHtml]=\"placeholder\" *ngIf=\"placeholder\"></label>\n    <div class=\"files-container\">\n\n        <ng-container *ngFor=\"let file of files; let i = index\">\n            <div class=\"file-container bounce-in\">\n                <ng-container *ngTemplateOutlet=\"fileTemplate; context: { $implicit: file, index: i }\"></ng-container>\n            </div>\n        </ng-container>\n\n        <ng-container *ngIf=\"canAddFile\">\n            <div class=\"file-container\">\n                <ng-container *ngIf=\"!addLink; else linkTemplate\">\n                    <ng-container *ngTemplateOutlet=\"addTemplate\"></ng-container>\n                </ng-container>\n            </div>\n        </ng-container>\n    </div>\n\n</div>\n\n<ng-template #addTemplate>\n    <button mat-button inputFileDropZone class=\"file-button\" type=\"button\" (click)=\"fileInput.click()\" (itemDrop)=\"onSelectFile($event, selectButton)\"\n        (itemDragOver)=\"onDragOver(selectButton)\" (itemDragLeave)=\"onDragLeave(selectButton)\" [disabled]=\"disabled\" #selectButton>\n        <mat-icon class=\"input-icon\">{{ iconAdd }}</mat-icon>\n    </button>\n    <button mat-button class=\"secondary-button\" type=\"button\" [disabled]=\"disabled\" (click)=\"onLink()\" *ngIf=\"linkEnabled\">\n        <mat-icon>{{ iconLink }}</mat-icon>\n    </button>\n    <input [id]=\"id\" [accept]=\"fileAccept\" hidden type=\"file\" [attr.multiple]=\"fileLimit > 1 ? true : null\" #fileInput (change)=\"onSelectFile($event.target.files, selectButton)\">\n</ng-template>\n\n<ng-template #fileTemplate let-file let-index=\"index\">\n    <button mat-button inputFileDropZone class=\"replace-button\" type=\"button\" (click)=\"fileReplace.click()\" (itemDrop)=\"onReplaceFile($event, index, replaceButton)\"\n        [disabled]=\"disabled\" (itemDragOver)=\"onDragOver(replaceButton)\" (itemDragLeave)=\"onDragLeave(replaceButton)\" #replaceButton>\n        <img class=\"image-preview\" [src]=\"file.preview\" *ngIf=\"file.preview; else noPreview\">\n        <ng-template #noPreview>\n            <mat-icon class=\"input-icon\">{{ iconFile }}</mat-icon>\n            <div class=\"file-name text-truncate\" [innerHtml]=\"file.file.name\" *ngIf=\"file.file\"></div>\n        </ng-template>\n    </button>\n    <button mat-button class=\"secondary-button\" type=\"button\" (click)=\"onDeleteFile(index)\" [disabled]=\"disabled\">\n        <mat-icon>{{ iconDelete }}</mat-icon>\n    </button>\n    <input [accept]=\"fileAccept\" hidden type=\"file\" #fileReplace (change)=\"onReplaceFile($event.target.files, index, replaceButton, fileReplace)\">\n</ng-template>\n\n<ng-template #linkTemplate>\n    <form class=\"form-link slide-in-up\" [formGroup]=\"form\" (ngSubmit)=\"onSubmitLink()\" novalidate>\n        <mat-form-field class=\"input-link\">\n            <input matInput formControlName=\"link\" [placeholder]=\"placeholderLink\">\n        </mat-form-field>\n        <div class=\"form-link-button\">\n            <button mat-button type=\"button\" (click)=\"onLink()\" [disabled]=\"disabled\">\n                <mat-icon>arrow_back</mat-icon>\n            </button>\n            <button mat-button type=\"submit\" [disabled]=\"disabled\">\n                <mat-icon>check</mat-icon>\n            </button>\n        </div>\n    </form>\n</ng-template>",
                        styles: [".input-file-container{position:relative}.input-file-container .files-container{display:flex;flex-direction:row;flex-wrap:wrap;padding-top:1.25rem}.input-file-container .file-button,.input-file-container .file-container{align-items:center;display:flex;height:10rem;justify-content:center;width:10rem}.input-file-container .secondary-button{width:10rem}.input-file-container .file-button{flex:1}.input-file-container .file-container{flex-direction:column;margin-right:1rem}.input-file-container .replace-button{flex:1;width:10rem}.input-file-container .mat-button:focus{outline:0}.input-file-container .file-name{width:calc(10rem - 2.5rem)}.input-file-container .image-preview{margin:0 -16px;height:10rem;-o-object-fit:contain;object-fit:contain;width:10rem}.input-file-container .input-icon{font-size:calc(10rem / 4);height:calc(10rem / 4);width:calc(10rem / 4)}.input-file-container .form-link{display:flex;flex-direction:column;width:10rem}.input-file-container .input-link{width:10rem}.input-file-container .form-link-button{display:flex;flex-direction:row}.input-file-container .form-link-button .mat-button{min-width:calc(10rem / 2);width:calc(10rem / 2)}.input-file-container .mat-orphan-label{color:rgba(0,0,0,.54);display:block;font-size:1rem;left:0;margin:0;position:absolute;top:0;-webkit-transform-origin:0;transform-origin:0;transition:.4s cubic-bezier(.25,.8,.25,1),width .4s cubic-bezier(.25,.8,.25,1)}.input-file-container .mat-orphan-label.active{-webkit-transform:scale(.75);transform:scale(.75)}@-webkit-keyframes bounceIn{20%,40%,60%,80%,from,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{opacity:0;-webkit-transform:scale3d(.3,.3,.3);transform:scale3d(.3,.3,.3)}20%{-webkit-transform:scale3d(1.1,1.1,1.1);transform:scale3d(1.1,1.1,1.1)}40%{-webkit-transform:scale3d(.9,.9,.9);transform:scale3d(.9,.9,.9)}60%{opacity:1;-webkit-transform:scale3d(1.03,1.03,1.03);transform:scale3d(1.03,1.03,1.03)}80%{-webkit-transform:scale3d(.97,.97,.97);transform:scale3d(.97,.97,.97)}to{opacity:1;-webkit-transform:scale3d(1,1,1);transform:scale3d(1,1,1)}}@keyframes bounceIn{20%,40%,60%,80%,from,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{opacity:0;-webkit-transform:scale3d(.3,.3,.3);transform:scale3d(.3,.3,.3)}20%{-webkit-transform:scale3d(1.1,1.1,1.1);transform:scale3d(1.1,1.1,1.1)}40%{-webkit-transform:scale3d(.9,.9,.9);transform:scale3d(.9,.9,.9)}60%{opacity:1;-webkit-transform:scale3d(1.03,1.03,1.03);transform:scale3d(1.03,1.03,1.03)}80%{-webkit-transform:scale3d(.97,.97,.97);transform:scale3d(.97,.97,.97)}to{opacity:1;-webkit-transform:scale3d(1,1,1);transform:scale3d(1,1,1)}}.bounce-in{-webkit-animation-duration:.75s;animation-duration:.75s;-webkit-animation-name:bounceIn;animation-name:bounceIn}@-webkit-keyframes slideInUp{from{opacity:0;-webkit-transform:translate3d(0,100%,0);transform:translate3d(0,100%,0)}to{opacity:1;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}}@keyframes slideInUp{from{opacity:0;-webkit-transform:translate3d(0,100%,0);transform:translate3d(0,100%,0)}to{opacity:1;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}}.slide-in-up{-webkit-animation-duration:.25s;animation-duration:.25s;-webkit-animation-name:slideInUp;animation-name:slideInUp}"],
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: i0.forwardRef(function () { return InputFileComponent; }),
                                multi: true
                            }
                        ]
                    },] },
        ];
        /** @nocollapse */
        InputFileComponent.ctorParameters = function () {
            return [
                { type: forms.FormBuilder },
                { type: InputFileService }
            ];
        };
        InputFileComponent.propDecorators = {
            disabled: [{ type: i0.Input }],
            placeholder: [{ type: i0.Input }],
            fileAccept: [{ type: i0.Input }],
            fileLimit: [{ type: i0.Input }],
            iconAdd: [{ type: i0.Input }],
            iconDelete: [{ type: i0.Input }],
            iconFile: [{ type: i0.Input }],
            iconLink: [{ type: i0.Input }],
            linkEnabled: [{ type: i0.Input }],
            placeholderLink: [{ type: i0.Input }],
            sizeLimit: [{ type: i0.Input }],
            acceptedFile: [{ type: i0.Output }],
            deletedFile: [{ type: i0.Output }],
            rejectedFile: [{ type: i0.Output }],
            fileInput: [{ type: i0.ViewChild, args: ['fileInput',] }]
        };
        return InputFileComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DropZoneDirective = (function () {
        function DropZoneDirective() {
            this.disabled = false;
            this.itemDragOver = new i0.EventEmitter();
            this.itemDragLeave = new i0.EventEmitter();
            this.itemDrop = new i0.EventEmitter();
            this.whiteListClasses = ['file-button', 'mat-button-wrapper', 'input-icon'];
        }
        /**
         * Drag Over event handler.
         * @param event
         */
        /**
         * Drag Over event handler.
         * @param {?} event
         * @return {?}
         */
        DropZoneDirective.prototype.onDragOver = /**
         * Drag Over event handler.
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.preventAndStopEventPropagation(event);
                if (!this.isOver && !this.disabled) {
                    this.isOver = true;
                    this.itemDragOver.emit();
                }
            };
        /**
         * Drag Leave event handler.
         * @param event
         */
        /**
         * Drag Leave event handler.
         * @param {?} event
         * @return {?}
         */
        DropZoneDirective.prototype.onDragLeave = /**
         * Drag Leave event handler.
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.preventAndStopEventPropagation(event);
                if (this.isOver && this.isTrueLeave(event) && !this.disabled) {
                    this.isOver = false;
                    this.itemDragLeave.emit();
                }
            };
        /**
         * Drop event handler.
         * @param event
         */
        /**
         * Drop event handler.
         * @param {?} event
         * @return {?}
         */
        DropZoneDirective.prototype.onDrop = /**
         * Drop event handler.
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (!this.disabled && event instanceof DragEvent) {
                    this.preventAndStopEventPropagation(event);
                    this.isOver = false;
                    try {
                        this.itemDrop.emit(event.dataTransfer.files);
                    }
                    catch (e) {
                        console.error(e);
                    }
                }
            };
        /**
         * Prevents and stops event propagration.
         * @param {?} event
         * @return {?}
         */
        DropZoneDirective.prototype.preventAndStopEventPropagation = /**
         * Prevents and stops event propagration.
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.preventDefault();
                event.stopPropagation();
            };
        /**
         * Checks if the leave is not trigger by a children.
         * @param {?} event
         * @return {?}
         */
        DropZoneDirective.prototype.isTrueLeave = /**
         * Checks if the leave is not trigger by a children.
         * @param {?} event
         * @return {?}
         */
            function (event) {
                try {
                    for (var _a = __values(this.whiteListClasses), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var c = _b.value;
                        if (event.fromElement != null && event.fromElement.className.indexOf(c) >= 0) {
                            return false;
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return))
                            _c.call(_a);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return true;
                var e_1, _c;
            };
        DropZoneDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[inputFileDropZone]'
                    },] },
        ];
        DropZoneDirective.propDecorators = {
            disabled: [{ type: i0.Input }],
            itemDragOver: [{ type: i0.Output }],
            itemDragLeave: [{ type: i0.Output }],
            itemDrop: [{ type: i0.Output }],
            onDragOver: [{ type: i0.HostListener, args: ['dragover', ['$event'],] }],
            onDragLeave: [{ type: i0.HostListener, args: ['dragleave', ['$event'],] }],
            onDrop: [{ type: i0.HostListener, args: ['drop', ['$event'],] }]
        };
        return DropZoneDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var InputFileModule = (function () {
        function InputFileModule() {
        }
        /**
         * @param {?} config
         * @return {?}
         */
        InputFileModule.forRoot = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                return {
                    ngModule: InputFileModule,
                    providers: [
                        InputFileService,
                        { provide: 'config', useValue: config }
                    ]
                };
            };
        InputFileModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [
                            DropZoneDirective,
                            InputFileComponent
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            button.MatButtonModule,
                            formField.MatFormFieldModule,
                            icon.MatIconModule,
                            input.MatInputModule,
                            forms.ReactiveFormsModule
                        ],
                        exports: [
                            InputFileComponent
                        ],
                        providers: [
                            InputFileService
                        ],
                        entryComponents: [InputFileComponent]
                    },] },
        ];
        return InputFileModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.InputFileComponent = InputFileComponent;
    exports.InputFileModule = InputFileModule;
    exports.InputFileService = InputFileService;
    exports.ɵb = DropZoneDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,